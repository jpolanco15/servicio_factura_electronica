import sys
import chilkat

# This example requires the Chilkat API to have been previously unlocked.
# See Global Unlock Sample for sample code.

# This example will add an XAdES-EPES signature to the file
# at FacturaElectronica_cr.xml
# 
# The XML to be signed looks like this:

# 	<?xml version="1.0" encoding="UTF-8"?>
# 	<FacturaElectronica xmlns="https://tribunet.hacienda.go.cr/docs/esquemas/2017/v4.2/facturaElectronica" 
#                xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
# 	   <Clave>70609022800030259092400100001010000000005100001701</Clave>
# 	   <NumeroConsecutivo>00100001010000000007</NumeroConsecutivo>
# 	   <FechaEmision>2018-02-08T22:05:20.3925782-06:00</FechaEmision>
# 	   <Emisor>
# 	   ...
# 	   </Emisor>
# 	   ...
# 	   <Normativa>
# 	      <NumeroResolucion>DGT-R-48-2016</NumeroResolucion>
# 	      <FechaResolucion>20-02-2017 13:22:22</FechaResolucion>
# 	   </Normativa>
# 	</FacturaElectronica>

# First load a certificate w/ private key from a .pfx.
# (There are many different ways to provide the certificate + private key for signing.
# loading a .pfx is just one particular way of doing it..)
def createCert(tipo_factura,xml_sin_firmar, certificate_path, pin):
    cert = chilkat.CkCert()
    success = cert.LoadPfxFile(certificate_path, pin)
    if (success != True):
        print(cert.lastErrorText())
        sys.exit()

    # Load XML to be signed.
    sbXml = chilkat.CkStringBuilder()
    # success = sbXml.LoadFile("qa_data/xades/factura_cr/FacturaElectronica.xml","utf-8")
    # if (success != True):
    #     print("Failed to load file.")
    #     sys.exit()
    sbXml.Append(xml_sin_firmar)
 

    gen = chilkat.CkXmlDSigGen()

    # Indicate where the signature is to be placed.
    gen.put_SigLocation(tipo_factura)
    # The SigId can be any random unique string in any format (in other words, there is no expected format).  
    # For example, "Hello_23946359203502" or "A3982BF7130C".  It is arbitrary.
    # However, other parts of the XML will reference the ID you use here.  (Search for the same string below and you'll see...)
    gen.put_SigId("Signature-d1cbfe99-fd8e-4e0f-b0b7-fc5bfe2f1dd0")
    gen.put_SigNamespacePrefix("ds")
    gen.put_SignedInfoCanonAlg("C14N")
    gen.put_SignedInfoDigestMethod("sha256")


    xml = chilkat.CkXml()
    xml.put_Tag("xades:QualifyingProperties")
    xml.AddAttribute("xmlns:xades","http://uri.etsi.org/01903/v1.3.2#")
    xml.AddAttribute("Id","QualifyingProperties-aa262416-8607-4f02-8897-0a6440a1ae03")
    xml.AddAttribute("Target","#Signature-d1cbfe99-fd8e-4e0f-b0b7-fc5bfe2f1dd0")
    xml.UpdateAttrAt("xades:SignedProperties",True,"Id","SignedProperties-Signature-d1cbfe99-fd8e-4e0f-b0b7-fc5bfe2f1dd0")
    xml.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SigningTime","TO BE GENERATED BY CHILKAT")
    xml.UpdateAttrAt("xades:SignedProperties|xades:SignedSignatureProperties|xades:SigningCertificateV2|xades:Cert|xades:CertDigest|ds:DigestMethod",True,"Algorithm","http://www.w3.org/2001/04/xmlenc#sha256")
    xml.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SigningCertificateV2|xades:Cert|xades:CertDigest|ds:DigestValue","TO BE GENERATED BY CHILKAT")
    xml.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SigningCertificateV2|xades:Cert|xades:IssuerSerialV2","TO BE GENERATED BY CHILKAT")
    xml.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SignaturePolicyIdentifier|xades:SignaturePolicyId|xades:SigPolicyId|xades:Identifier","https://tribunet.hacienda.go.cr/docs/esquemas/2017/v4.2/Resolucion%20Comprobantes%20Electronicos%20%20DGT-R-48-2016.pdf")
    xml.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SignaturePolicyIdentifier|xades:SignaturePolicyId|xades:SigPolicyId|xades:Description","")
    xml.UpdateAttrAt("xades:SignedProperties|xades:SignedSignatureProperties|xades:SignaturePolicyIdentifier|xades:SignaturePolicyId|xades:SigPolicyHash|ds:DigestMethod",True,"Algorithm","http://www.w3.org/2001/04/xmlenc#sha256")
    xml.UpdateChildContent("xades:SignedProperties|xades:SignedSignatureProperties|xades:SignaturePolicyIdentifier|xades:SignaturePolicyId|xades:SigPolicyHash|ds:DigestValue","NmI5Njk1ZThkNzI0MmIzMGJmZDAyNDc4YjUwNzkzODM2NTBiOWUxNTBkMmI2YjgzYzZjM2I5NTZlNDQ4OWQzMQ==")
    xml.UpdateAttrAt("xades:SignedProperties|xades:SignedDataObjectProperties|xades:DataObjectFormat",True,"ObjectReference","#Reference-ab26afbd-e2dc-4cb0-886a-ce2a4a118c7f")
    xml.UpdateChildContent("xades:SignedProperties|xades:SignedDataObjectProperties|xades:DataObjectFormat|xades:MimeType","text/xml")
    xml.UpdateChildContent("xades:SignedProperties|xades:SignedDataObjectProperties|xades:DataObjectFormat|xades:Encoding","UTF-8")

    # --------------------------------------------------------------------
    # Add the QualifyingProperties as an Object in the Signature that is to be produced.

    gen.AddObject("XadesObjectId-674a431e-692c-4e0a-9d82-6275c85c5876",xml.getXml(),"","")

    # Add a Reference to the SignedProperties.
    signedPropsId = "SignedProperties-Signature-d1cbfe99-fd8e-4e0f-b0b7-fc5bfe2f1dd0"
    gen.AddObjectRef(signedPropsId,"sha256","EXCL_C14N","","http://uri.etsi.org/01903#SignedProperties")



    keyInfoId = "KeyInfoId-Signature-d1cbfe99-fd8e-4e0f-b0b7-fc5bfe2f1dd0"
    gen.put_KeyInfoId(keyInfoId)
    gen.AddSameDocRef(keyInfoId,"sha256","EXCL_C14N","","")
    gen.SetRefIdAttr(keyInfoId,"ReferenceKeyInfo")

    # --------------------------------------------------------------------
    # Add our 3rd and final Reference, which is to the root element of the XML document being signed.

    gen.AddSameDocRef("","sha256","EXCL_C14N","","")
    gen.SetRefIdAttr("","Reference-ab26afbd-e2dc-4cb0-886a-ce2a4a118c7f")


    gen.put_KeyInfoType("X509Data")
    gen.put_X509Type("Certificate")
    success = gen.SetX509Cert(cert,True)
    if (success == False):
        print(gen.lastErrorText())
        sys.exit()

    # --------------------------------------------------------------------
    # Create the XAdES-EPES signed XML.
    gen.put_Behaviors("IndentedSignature")

    success = gen.CreateXmlDSigSb(sbXml)
    if (success == False):
        print(gen.lastErrorText())
        sys.exit()

    # Examine the signed XML
    return sbXml.getAsString()